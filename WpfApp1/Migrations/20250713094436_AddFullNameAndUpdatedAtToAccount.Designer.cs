// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WpfApp1.Data;

#nullable disable

namespace WpfApp1.Migrations
{
    [DbContext(typeof(PharmacyDbContext))]
    [Migration("20250713094436_AddFullNameAndUpdatedAtToAccount")]
    partial class AddFullNameAndUpdatedAtToAccount
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WpfApp1.Models.Account", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Accounts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Balance = 10000m,
                            CreatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6144),
                            Email = "admin@pharmacy.com",
                            FullName = "",
                            IsActive = true,
                            Password = "admin123",
                            Role = "Admin",
                            UpdatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6137),
                            Username = "admin"
                        });
                });

            modelBuilder.Entity("WpfApp1.Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.HasIndex("ProductId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("WpfApp1.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("AccountId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("WpfApp1.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("WpfApp1.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("ImagePath")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Manufacturer")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("StockQuantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Pain Relief",
                            CreatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6303),
                            Description = "Pain reliever and fever reducer",
                            IsActive = true,
                            Manufacturer = "Generic Pharma",
                            Name = "Paracetamol 500mg",
                            Price = 5.99m,
                            StockQuantity = 100,
                            UpdatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6303)
                        },
                        new
                        {
                            Id = 2,
                            Category = "Pain Relief",
                            CreatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6308),
                            Description = "Anti-inflammatory pain reliever",
                            IsActive = true,
                            Manufacturer = "HealthCare Inc",
                            Name = "Ibuprofen 400mg",
                            Price = 7.99m,
                            StockQuantity = 75,
                            UpdatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6308)
                        },
                        new
                        {
                            Id = 3,
                            Category = "Vitamins",
                            CreatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6311),
                            Description = "Immune system support",
                            IsActive = true,
                            Manufacturer = "NutriLife",
                            Name = "Vitamin C 1000mg",
                            Price = 12.99m,
                            StockQuantity = 50,
                            UpdatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6311)
                        },
                        new
                        {
                            Id = 4,
                            Category = "Digestive Health",
                            CreatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6314),
                            Description = "Acid reflux medication",
                            IsActive = true,
                            Manufacturer = "DigestCare",
                            Name = "Omeprazole 20mg",
                            Price = 15.99m,
                            StockQuantity = 30,
                            UpdatedAt = new DateTime(2025, 7, 13, 16, 44, 36, 228, DateTimeKind.Local).AddTicks(6314)
                        });
                });

            modelBuilder.Entity("WpfApp1.Models.CartItem", b =>
                {
                    b.HasOne("WpfApp1.Models.Account", "Account")
                        .WithMany("CartItems")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp1.Models.Product", "Product")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WpfApp1.Models.Order", b =>
                {
                    b.HasOne("WpfApp1.Models.Account", "Account")
                        .WithMany("Orders")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("WpfApp1.Models.OrderItem", b =>
                {
                    b.HasOne("WpfApp1.Models.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WpfApp1.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("WpfApp1.Models.Account", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("WpfApp1.Models.Order", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("WpfApp1.Models.Product", b =>
                {
                    b.Navigation("CartItems");

                    b.Navigation("OrderItems");
                });
#pragma warning restore 612, 618
        }
    }
}
